---
description: 
globs: 
alwaysApply: false
---
# 聚义厅MCP开发规则

## 项目概述
聚义厅MCP是基于Model Context Protocol的AI人格协作系统，采用服务端配置生成 + 客户端MCP执行的架构模式。

### 核心特性
- 🎭 **多人格协作**: 支持暴躁老哥、自省姐、粉丝妹等多种AI人格
- ⚙️ **配置同步**: 用户在Web平台配置，MCP客户端自动同步
- 🤝 **智能协作**: 支持并行、顺序、智能三种协作模式
- 🔧 **标准化接口**: 严格遵循MCP协议规范

## 开发规范

### 代码结构
```
src/
├── server.ts              # MCP服务器主入口
├── types.ts               # 类型定义
├── persona-repository.ts  # 人格仓库
├── persona-sources.ts     # 人格数据源
├── collaboration-engine.ts # 协作引擎
├── config-synchronizer.ts # 配置同步器
└── telemetry.ts          # 遥测模块
```

### 技术栈要求
- **Node.js**: 18+
- **TypeScript**: 5.8+
- **MCP SDK**: @modelcontextprotocol/sdk 1.12.3+
- **命令行**: Commander.js 12.1+
- **数据验证**: Zod 3.25+

### 核心设计原则
1. **标准化优先**: 严格遵循MCP协议规范
2. **可扩展性**: 插件化的人格管理，模块化的协作引擎
3. **用户体验**: 零配置启动，智能错误提示
4. **性能优化**: 本地缓存机制，懒加载策略

### MCP工具规范
所有MCP工具必须：
- 提供清晰的输入参数定义
- 包含详细的错误处理
- 支持遥测数据收集
- 返回标准化的响应格式

### 人格管理规范
- 本地人格优先级 > 远程人格 > 默认人格
- 支持多源数据获取（GitHub、Gitee、CDN）
- 实现智能缓存和降级策略
- 提供人格验证和格式检查

### 协作引擎规范
- 支持三种协作模式：parallel、sequential、intelligent
- 实现智能人格选择算法
- 提供会话状态管理
- 支持交叉验证和结果综合

### 配置同步规范
- 支持远程配置下载和本地存储
- 实现自动同步检查机制
- 提供配置完整性验证
- 支持版本管理和更新通知
